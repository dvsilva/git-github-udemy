================================================================

SECTION 2

git init -> inicializar repositório
git add teste.txt -> adicionar arquivo
git commit -m "hello world git" -> commitar alterações

git branch -M master -> criar branch master
git remote add origin https://github.com/dvsilva/git-github-udemy.git -> adicionar origem remota
git push -u origin master -> enviar para origem remota

remover origem atual
git remote -v -> visualizar origens
git remote rm origin -> remover origem remota

git status -> visualizar mudanças no repo

git add index.html -> adicionar arquivo especifico
git add . -> adicionar tudo da pasta

git commit a.txt -m "enviando o arquivo a" -> enviar arquivo a.txt
git commit -a -m "enviando a funcionalidade x" -> adiciona e envia todos os arquivos

git push -> enviar commits ao repositorio remoto

git pull -> puxar alterações de um repositório git remoto

git clone https://github.com/dvsilva/git-github-udemy -> clonar repositórios remotos

git rm c.txt -> deletar arquivo c.txt do projeto e do git

git log -> histórico de alterações

git mv -> remover ou mover arquivo
git mv rodape.css css/rodape.css
git mv css/bannerinicia.css css/banner_inicial.css

git checkout -> desfazendo alterações / resetar arquivos
git checkout css/styles.css

.gitignore -> ignorando arquivos do projeto (criar arquivo)

git reset -> resetando uma branch (alterações commitadas e pendentes serão excluidas)
git reset --hard origin/master -> trazer estado de uma branch

================================================================

SECTION 3

git branch -> listar branch
git branch primeiro_branch -> criar um branch
git branch [-d  ou -- delete] primeiro_branch -> deletar um branch
git checkout primeiro_branch -> mudar de branch
git checkout -b primeiro_branch -> criar e mudar de branch
git merge teste_criacao -> unir branches

git stash -> salvar alterações e não perder código (lixeira) e pode recuperar
git stash list -> listar todas as stash
git stash apply <numero - ex: 0> -> recuperar stash
git stash show -p 0 -> mostrar alterações de uma stash
git stash clear -> limpar totalmente as stashs de um branch
git stash drop <nome> -> deletar uma stash

git tag -a v1.0 -m "primeira versão" -> criar tag (serve como um checkpoint de um branch)
git tag -> listar tags
git show v2.0 -> verificar tags (detalhes em log)
git checkout v3.0 -> trocar de tags
git push origin v2.0 -> enviar e compartilhar tag para repo remoto
git push origin --tags -> enviar todas as tags do repo remoto

================================================================

SECTION 4

git fetch -a -> receber outros branches que estão no repositório remoto (-a puxar todos)
git pull -> receber alterações 

criar branches a partir da master
git checkout master
git pull
git checkout -b novo_branch

git push -> envia alterações para o repo remoto (arquivos commitados)

git remote -> adicionar, trackear ou remover repo
git remote -v -> listar origens
git remote rm origin -> remover origem
git remote add origin <link> -> adicionar origem

submodules permite dois ou mais projetos em um repositório (precisa ter mais de um repo)
git submodule add <repo> <pasta> -> adiciona um repositorio dentro de outro
git push --recursive-submodules=on-demand -> atualiza apenas o submodule

================================================================

SECTION 5

git show -> lista informações uteis / movimentações / commits em uma branch
git show <tag> -> mostra diferenças entre as versões das tags

git diff -> mostra diferenças dos branches
git diff master -> mostra diferenças ds branche atual com a master
git diff HEAD:a.txt a.txt -> mostra diferenças entre arquivos

git shortlog -> log resumido do projeto
git describe --tags -> podemos verificar todas as tags do nosso projeto (--all recebe as tags)

================================================================

SECTION 6

git clone <link> <pasta> -> clona projeto para uma pasta específica
git add -> adiciona arquivos que deseja manter antes
git clean -f -> forçar limpar somente novos arquivos que não estão sendo trackeados (nao usou git add)

git gc -> abreviação para garbage collector, identifica arquivos que não são mais necessários e os exclui

git fsck -> abreviação de File System Check. verifica a integridade de arquivos e arquivos corrompidos

git reflog -> mapear todos os seus passos no repositório (expiram em 30 dias)
git reset --hard <hash> -> avançar e também retroceder nas hashs do reflog (salvar estado atual com git stash antes)

git archive --format zip --output master_files.zip master -> transformar o repo um arquivo compactado

================================================================

SECTION 7

Aba Code, Issues, Pull Request, Actions, Projects, Wiki, Settings, Gists ..

================================================================

SECTION 8

markdown -> é uma forma de adicionar estilos a textos na web

titulos
# - h1
## - h2
### - h3

ênfase nos textos
**texto** - negrito
__texto__ - itálico
_um**texto**combinado_ - os dois

listas
ordenadas - 1. item
não ordenadas - * item

imagens - ![texto alt](link da imagem)

links - [texto do link](link)

inserir código - ```código```

lista de tarefas
- [] ou - [x]

================================================================

SECTION 9

Você deve seguir alguns passos simples, veja:
1. Criar um repositório com o nome nomedousuario.github.io
2. Clonar o repositório no nosso computador
3. Adicionar o código do projeto na branch master
4. Enviar o código por meio de push
5. E pronto, você tem um site em https://nomedousuario.github.io

criar html básico -> digitar ! + tab
